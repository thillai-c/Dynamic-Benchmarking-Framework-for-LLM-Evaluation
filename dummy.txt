       # Convert Q&A to JSON format
    #     json_data = json.dumps({'qna': weather_qna})
        

    #     # # Return JSON data as a downloadable file
    #     # return Response(

    #     #     json_data,
    #     #     mimetype='application/json',
    #     #     headers={'Content-Disposition': 'attachment;filename=weather_data.json'}
    #     # )
    #     if response_type == 'questions':
    #         questions_only = [{'question': qa['question']} for qa in weather_qna]
    #         json_data = json.dumps(questions_only, indent=4)
    #         response = Response(json_data, mimetype='application/json')
    #         response.headers['Content-Disposition'] = 'attachment; filename=weather_questions.json'
    #         return response
    #     else:
    #         json_data = json.dumps(weather_qna, indent=4)
    #         response = Response(json_data, mimetype='application/json')
    #         response.headers['Content-Disposition'] = 'attachment; filename=weather_qna.json'
    #         return response
        
###############################################################################
    # except Exception as e:
    #     return jsonify({'error': str(e)})
            # Convert Q&A to JSON format
    #     json_data = json.dumps({'qna': weather_qna}, indent=4)

    #     # Display JSON in browser and provide download link
    #     if response_type == 'questions':
    #         questions_only = [{'question': qa['question']} for qa in weather_qna]
    #         json_data = json.dumps(questions_only, indent=4)

    #         # Render the JSON data in a webpage
    #         return render_template('json_display.html', json_data=json_data, download_filename="weather_questions.json")

    #     else:
    #         # Return full Q&A JSON
    #         return render_template('json_display.html', json_data=json_data, download_filename="weather_qna.json")

    # except Exception as e:
    #     return jsonify({'error': str(e)})
    